% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/minio_server.R
\name{minio_server}
\alias{minio_server}
\title{minio}
\usage{
minio_server(
  flags = c(),
  dir = tempdir(),
  process_args = list(stdout = "", stderr = ""),
  path = minio_server_path()
)
}
\arguments{
\item{flags}{a character vector of flags to pass after the \verb{minio server}
command}

\item{dir}{the directories or directory specification where the minio server
will store data. See the \href{https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#minio.server.DIRECTORIES}{server docs}
for how to specify multiple directories.}

\item{process_args}{a list of additional arguments passed to
\link[processx:process]{processx::process$run()}. For instance, you can control
most of the server configuration with by setting environment variables,
e.e.g, \code{list(env = c("MINIO_ROOT_USER" = "user", "MINIO_ROOT_PASSWORD" = "password"))}.}

\item{path}{location where the minio  serverexecutable will be installed if
not present. By default will use the OS-appropriate storage location.}
}
\value{
Returns a \link[processx:process]{processx::process} handle to the running server.
}
\description{
The MINIO server
}
\details{
This function launches the minio server as a peristent process in teh
backgound. For documentation of options and flags available, see the server
documentation at
\url{https://min.io/docs/minio/linux/reference/minio-server/minio-server.html}.
}
\examples{
\dontshow{if (interactive() ) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
  srv <- minio_server()

  # The server health endpoint can be read by anyone and yields status 200
  curlGetHeaders("http://localhost:9000/minio/health/live")
  
  # But other info on the API requires authentication so yields a 403
  curlGetHeaders("http://localhost:9000/minio/v2/metrics/cluster")
  
  # Now visit the server at the URLs printed to the console
  # browseURL("http://localhost:9000/minio")
  srv$kill()
\dontshow{\}) # examplesIf}
}
